// Если один из операндов бинарного сложения - строка, то будет происходить конкатенация
console.log("1" + 2 + 0);
console.log(typeof ("1" + 2 + 0));
// Оператор "-", данные преобразуются в числовой тип
console.log("1" - 1 + 2);
console.log(typeof ("1" - 1 + 2));
// Оператор "+", булевые значения преобразуются в числовые, т.е. 1 и 0 соответственно
console.log(true + false);
console.log(typeof (true + false));
// Оператор деления, тип данных - числовой
console.log(10 / "5");
console.log(typeof (10 / "5"));
// Оператор умножения, тип данных - числовой
console.log("2" * "3");
console.log(typeof ("2" * "3"));
// Первый оператор сложения имеет в качестве операндов числа, т.о. результат 9, затем один из операндов второго сложения - строка, результат - строка
console.log(4 + 5 + "px");
console.log(typeof (4 + 5 + "px"));
// Один из операндов обоих операторов сложения - строковый, результат - строка
console.log("$" + 4 + 5);
console.log(typeof ("$" + 4 + 5));
// Оператор "-", данные преобразуются в числовой тип
console.log("42" - 2);
console.log(typeof ("42" - 2));
// Оператор "-" - попытка преобразовать "4px" в число, результат NaN
console.log("4px" - 2);
console.log(typeof ("4px" - 2));
// Обычная математическая операция. Деление на 0 дает бесконечность, как и умножение на Infinity
console.log(7 / 0);
console.log(typeof (7 / 0));
// Конкатенация. Результат - строка с переносом
console.log("  -9\n" + 5);
console.log(typeof ("  -9\n" + 5));
// Оператор "-", приведение к численному типу. Если строка содержит пустые и управляющие символы, то они опускаются, если есть другие символы - NaN
console.log("  -9\n" - 5);
console.log(typeof ("  -9\n" - 5));
// Логическое И. Если первый операнд ложь, второй не вычисляется, если первый истина, то возвращает второй операнд
console.log(5 && 2);
console.log(typeof (5 && 2));
// Логическое И. Если первый операнд - ложь, второй не вычисляется, если первый - истина, то возвращает второй операнд
console.log(2 && 5);
console.log(typeof (2 && 5));
// Логическое ИЛИ. Второй операнд вычисляется, только если первый - ложь.
console.log(5 || 0);
console.log(typeof (5 || 0));
// Логическое ИЛИ. Второй операнд вычисляется, только если первый - ложь.
console.log(0 || 5);
console.log(typeof (0 || 5));
// При преобразовании null к числу получаем 0, в случае undefined - NaN
console.log(null + 1);
console.log(typeof (null + 1));
// При преобразовании null к числу получаем 0, в случае undefined - NaN
console.log(undefined + 1);
console.log(typeof (undefined + 1));
// null и undefined не равны ничему, кроме null и undefined
console.log(null == "\n0\n");
console.log(typeof (null == "\n0\n"));
// Оба операнда преобразуются к числовым с помощью унарного оператора +
console.log(+null == +"\n0\n");
console.log(typeof (+null == +"\n0\n"));
// {} + [] - вначале идет пустой блок инструкций, который просто игнорируется, остается унарный оператор + с операндом пустого массива, который преобразуется к числовому типу, получая 0
// [] + {} - если операндами сложения выступают массивы или объекты, они преобразуются в строки. Массив пуст, поэтому преобразуется в пустую строку. Затем у объекта вызывается стандартный унаследованный метод toString, который возвращает строку "[object Object]".